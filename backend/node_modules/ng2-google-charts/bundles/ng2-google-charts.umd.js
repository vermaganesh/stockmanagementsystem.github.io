(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng2-google-charts', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ng2-google-charts'] = {}, global.ng.core));
}(this, (function (exports, i0) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    function __exportStar(m, exports) {
        for (var p in m)
            if (!exports.hasOwnProperty(p))
                exports[p] = m[p];
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    result[k] = mod[k];
        result.default = mod;
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    exports.GoogleChartsLoaderService = /** @class */ (function () {
        function GoogleChartsLoaderService(localeId, googleChartsSettings) {
            var _this = this;
            this.googleChartsSettings = googleChartsSettings;
            this.googleScriptLoadingNotifier = new i0.EventEmitter();
            this.googleScriptIsLoading = false;
            this.localeId = localeId;
            this.loadGoogleChartsScriptPromise = new Promise(function (resolve, reject) {
                if (typeof google !== 'undefined' && google.charts) {
                    resolve();
                }
                else if (!_this.googleScriptIsLoading) {
                    _this.googleScriptIsLoading = true;
                    var script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.src = 'https://www.gstatic.com/charts/loader.js';
                    script.async = true;
                    script.defer = true;
                    script.onload = function () {
                        _this.googleScriptIsLoading = false;
                        _this.googleScriptLoadingNotifier.emit(true);
                        resolve();
                    };
                    script.onerror = function () {
                        _this.googleScriptIsLoading = false;
                        _this.googleScriptLoadingNotifier.emit(false);
                        reject();
                    };
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
                else {
                    _this.googleScriptLoadingNotifier.subscribe(function (loaded) {
                        if (loaded) {
                            resolve();
                        }
                        else {
                            reject();
                        }
                    });
                }
            });
        }
        GoogleChartsLoaderService.prototype.load = function (settings) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loadGoogleChartsScriptPromise];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, new Promise(function (resolve) {
                                    if (!settings) {
                                        settings = Object.create(_this.googleChartsSettings);
                                    }
                                    if (!settings) {
                                        settings = {};
                                    }
                                    if (!settings.language) {
                                        settings.language = _this.localeId;
                                    }
                                    if (!settings.googleChartsVersion) {
                                        settings.googleChartsVersion = '47';
                                    }
                                    var _settings = settings;
                                    _settings.callback = resolve;
                                    google.charts.load(settings.googleChartsVersion, _settings);
                                })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return GoogleChartsLoaderService;
    }());
    exports.GoogleChartsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartsLoaderService_Factory() { return new exports.GoogleChartsLoaderService(i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject("googleChartsSettings", 8)); }, token: exports.GoogleChartsLoaderService, providedIn: "root" });
    exports.GoogleChartsLoaderService = __decorate([
        i0.Injectable({
            providedIn: 'root'
        }),
        __param(0, i0.Inject(i0.LOCALE_ID)),
        __param(1, i0.Inject('googleChartsSettings')), __param(1, i0.Optional()),
        __metadata("design:paramtypes", [String, Object])
    ], exports.GoogleChartsLoaderService);

    var GoogleChartsDataTable = /** @class */ (function () {
        function GoogleChartsDataTable(opt) {
            this.opt = opt;
            this.dataTableChanged = new i0.EventEmitter();
            if (opt) {
                this._setDataTable(opt.dataTable, opt.firstRowIsData);
            }
        }
        GoogleChartsDataTable.prototype.send = function () {
            var _this = this;
            if (this.query === undefined) {
                return;
            }
            this.query.send(function (queryResponse) {
                _this.setDataTable(queryResponse.getDataTable());
                if (_this.opt.queryCallback) {
                    _this.opt.queryCallback(queryResponse);
                }
            });
        };
        GoogleChartsDataTable.prototype.init = function (opt) {
            var _this = this;
            if (opt) {
                this.opt = opt;
            }
            if (this.tid !== undefined) {
                // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381
                // this.query.abort();
                window.clearInterval(this.tid);
                this.tid = undefined;
            }
            if (this.opt.dataSourceUrl) {
                this.query = new google.visualization.Query(this.opt.dataSourceUrl);
                if (this.opt.query) {
                    this.query.setQuery(this.opt.query);
                }
                if (this.opt.timeout !== undefined) {
                    this.query.setTimeout(this.opt.timeout);
                }
                if (this.opt.refreshInterval) {
                    // this.query.setRefreshInterval(this.opt.refreshInterval);
                    this.tid = window.setInterval(function () {
                        _this.send();
                    }, this.opt.refreshInterval * 1000);
                }
                this.send();
            }
            else {
                this.setDataTable(this.opt.dataTable);
            }
        };
        /**
         * @returns Underlying google.visualization.DataTable
         */
        GoogleChartsDataTable.prototype.getDataTable = function () {
            return this.dataTable;
        };
        GoogleChartsDataTable.prototype.setDataTable = function (dt, firstRowIsData) {
            if (firstRowIsData === undefined) {
                firstRowIsData = this.opt.firstRowIsData;
            }
            this._setDataTable(dt, firstRowIsData);
            this.dataTableChanged.emit(this.dataTable);
        };
        GoogleChartsDataTable.prototype._setDataTable = function (dt, firstRowIsData) {
            if (Array.isArray(dt)) {
                dt = google.visualization.arrayToDataTable(dt, firstRowIsData);
            }
            this.dataTable = dt;
            this.reformat();
        };
        /**
         * Applies formatters to data columns, if defined
         */
        GoogleChartsDataTable.prototype.reformat = function () {
            var e_1, _a, e_2, _b, e_3, _c;
            var dt = this.dataTable;
            if (dt === undefined) {
                return;
            }
            if (this.opt.formatters === undefined) {
                return;
            }
            try {
                for (var _d = __values(this.opt.formatters), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var formatterConfig = _e.value;
                    var formatter = void 0;
                    if (formatterConfig.type === 'PatternFormat') {
                        var fmtOptions = formatterConfig.options;
                        formatter = new google.visualization.PatternFormat(fmtOptions.pattern);
                        formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);
                        continue;
                    }
                    var formatterConstructor = google.visualization[formatterConfig.type];
                    var formatterOptions = formatterConfig.options;
                    formatter = new formatterConstructor(formatterOptions);
                    if (formatterConfig.type === 'ColorFormat' && formatterOptions) {
                        var fmtOptions = formatterOptions;
                        try {
                            for (var _f = (e_2 = void 0, __values(fmtOptions.ranges)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var range = _g.value;
                                if (typeof (range.fromBgColor) !== 'undefined'
                                    && typeof (range.toBgColor) !== 'undefined') {
                                    formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);
                                }
                                else {
                                    formatter.addRange(range.from, range.to, range.color, range.bgcolor);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    try {
                        for (var _h = (e_3 = void 0, __values(formatterConfig.columns)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var col = _j.value;
                            formatter.format(dt, col);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        return GoogleChartsDataTable;
    }());
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], GoogleChartsDataTable.prototype, "dataTableChanged", void 0);

    var ChartHTMLTooltip = /** @class */ (function () {
        function ChartHTMLTooltip(el) {
            this.el = el;
        }
        ChartHTMLTooltip.prototype.setPosition = function (x, y) {
            this.el.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;
            this.el.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;
        };
        ChartHTMLTooltip.prototype.getDOMElement = function () {
            return this.el;
        };
        return ChartHTMLTooltip;
    }());
    ChartHTMLTooltip.PIXELS = 'px';

    exports.GoogleChartComponent = /** @class */ (function () {
        function GoogleChartComponent(el, loaderService) {
            var _this = this;
            this.el = el;
            this.loaderService = loaderService;
            this.mouseOverListener = function (item) {
                var event = _this.parseMouseEvent(item);
                event.tooltip = _this.getHTMLTooltip();
                return event;
            };
            this.mouseOutListener = function (item) {
                var event = _this.parseMouseEvent(item);
                return event;
            };
            this.selectListener = function () {
                var event = {
                    message: 'select',
                    row: null,
                    column: null,
                    selectedRowValues: [],
                    selectedRowFormattedValues: [],
                    columnLabel: ''
                };
                var s = _this.wrapper.visualization.getSelection();
                var gs = s[s.length - 1];
                if (!gs) {
                    event.message = 'deselect';
                    return event;
                }
                var selection = gs;
                if (gs.row != null) {
                    event.row = selection.row;
                    var selectedRowValues = [];
                    var selectedRowFormattedValues = [];
                    var dataTable = _this.wrapper.getDataTable();
                    var numberOfColumns = dataTable.getNumberOfColumns();
                    for (var i = 0; i < numberOfColumns; i++) {
                        selectedRowValues.push(dataTable.getValue(selection.row, i));
                        selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));
                    }
                    event.selectedRowValues = selectedRowValues;
                    event.selectedRowFormattedValues = selectedRowFormattedValues;
                }
                if (selection.column != null) {
                    event.column = selection.column;
                    event.columnLabel = _this.getColumnLabelAtPosition(selection);
                }
                if (gs.name) {
                    event.columnLabel = gs.name;
                }
                return event;
            };
            this.chartSelect = new i0.EventEmitter();
            this.chartSelectOneTime = new i0.EventEmitter();
            this.chartReady = new i0.EventEmitter();
            this.chartReadyOneTime = new i0.EventEmitter();
            this.chartError = new i0.EventEmitter();
            this.chartErrorOneTime = new i0.EventEmitter();
            this.mouseOver = new i0.EventEmitter();
            this.mouseOverOneTime = new i0.EventEmitter();
            this.mouseOut = new i0.EventEmitter();
            this.mouseOutOneTime = new i0.EventEmitter();
            this.regionClick = new i0.EventEmitter();
            this.regionClickOneTime = new i0.EventEmitter();
        }
        GoogleChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.HTMLel = this.el.nativeElement.querySelector('div');
            if (Object.isExtensible(this.data)) {
                this.data.component = this;
            }
            this.options = this.data.options;
            this.init().then(function () {
                _this.draw();
            });
        };
        GoogleChartComponent.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.loaderService.load()];
                        case 1:
                            _a.sent();
                            this.recreateWrapper();
                            return [2 /*return*/];
                    }
                });
            });
        };
        GoogleChartComponent.prototype.recreateWrapper = function () {
            var _this = this;
            if (this.wrapper === undefined || this.wrapper.getChartType() !== this.data.chartType) {
                this.dataTable = new GoogleChartsDataTable(this.data);
                this.dataTable.dataTableChanged.subscribe(function (dt) {
                    _this._draw();
                });
                // see dataTable in https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart
                var temp = this.data;
                if (this.data.firstRowIsData) {
                    temp = Object.assign(temp, this.data);
                    temp.dataTable = this.dataTable.getDataTable();
                }
                this.wrapper = new google.visualization.ChartWrapper(temp);
                this.registerChartWrapperEvents();
                /* Calling draw even without data is the only way to pass the HTMl element
                   when using the chart in a dashboard. Don't do this in all other cases:
                   it breaks formatters with remote data source, hence the conditional. */
                if (temp.dataTable === undefined && temp.dataSourceUrl === undefined) {
                    try {
                        this.wrapper.draw(this.HTMLel);
                    }
                    catch (err) { }
                }
            }
        };
        GoogleChartComponent.prototype._draw = function () {
            return __awaiter(this, void 0, void 0, function () {
                var dt;
                return __generator(this, function (_a) {
                    dt = this.dataTable.getDataTable();
                    if (dt === undefined) {
                        return [2 /*return*/];
                    }
                    this.convertOptions();
                    this.recreateWrapper();
                    this.wrapper.setOptions(this.options);
                    this.wrapper.setDataTable(dt);
                    this.wrapper.draw(this.HTMLel);
                    return [2 /*return*/];
                });
            });
        };
        GoogleChartComponent.prototype.getDataTable = function () {
            return this.dataTable;
        };
        GoogleChartComponent.prototype.draw = function (value) {
            if (value === undefined) {
                value = this.data;
            }
            this.options = value.options;
            this.dataTable.init(value);
        };
        GoogleChartComponent.prototype.getSelectorBySeriesType = function (seriesType) {
            var selectors = {
                bars: 'bar#%s#%r',
                haxis: 'hAxis#0#label',
                line: 'point#%s#%r',
                legend: 'legendentry#%s',
                area: 'point#%s#%r'
            };
            var selector = selectors[seriesType];
            return selector;
        };
        /**
         * Given a column number, counts how many
         * columns have rol=="data". Those are mapped
         * one-to-one to the series array. When rol is not defined
         * a column of type number means a series column.
         * @param column to inspect
         */
        GoogleChartComponent.prototype.getSeriesByColumn = function (column) {
            var series = 0;
            var dataTable = this.wrapper.getDataTable();
            for (var i = column - 1; i >= 0; i--) {
                var role = dataTable.getColumnRole(i);
                var type = dataTable.getColumnType(i);
                if (role === 'data' || type === 'number') {
                    series++;
                }
            }
            return series;
        };
        GoogleChartComponent.prototype.getBoundingBoxForItem = function (item) {
            var boundingBox = { top: 0, left: 0, width: 0, height: 0 };
            if (this.cli) {
                var column = item.column;
                var series = this.getSeriesByColumn(column);
                var row = item.row;
                var seriesType = this.options.seriesType;
                if (this.options.series && this.options.series[series] && this.options.series[series].type) {
                    seriesType = this.options.series[series].type;
                }
                if (seriesType) {
                    var selector = this.getSelectorBySeriesType(seriesType);
                    if (selector) {
                        selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');
                        var box = this.cli.getBoundingBox(selector);
                        if (box) {
                            boundingBox = box;
                        }
                    }
                }
            }
            return boundingBox;
        };
        GoogleChartComponent.prototype.getValueAtPosition = function (position) {
            if (position.row == null) {
                return null;
            }
            var dataTable = this.wrapper.getDataTable();
            var value = dataTable.getValue(position.row, position.column);
            return value;
        };
        GoogleChartComponent.prototype.getColumnTypeAtPosition = function (position) {
            var dataTable = this.wrapper.getDataTable();
            var type = dataTable.getColumnType(position.column) || '';
            return type;
        };
        GoogleChartComponent.prototype.getColumnLabelAtPosition = function (position) {
            var dataTable = this.wrapper.getDataTable();
            var type = dataTable.getColumnLabel(position.column) || '';
            return type;
        };
        GoogleChartComponent.prototype.getHTMLTooltip = function () {
            var tooltipER = new i0.ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));
            return new ChartHTMLTooltip(tooltipER);
        };
        GoogleChartComponent.prototype.parseMouseEvent = function (item) {
            var chartType = this.wrapper.getChartType();
            var eventColumn = item.column;
            if (eventColumn == null) {
                switch (chartType) {
                    case 'Timeline':
                        eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;
                        break;
                    default:
                        eventColumn = 0;
                }
            }
            var eventRow = item.row;
            var myItem = {
                row: eventRow,
                column: eventColumn
            };
            var event = {
                position: item,
                boundingBox: this.getBoundingBoxForItem(myItem),
                value: this.getValueAtPosition(myItem),
                columnType: this.getColumnTypeAtPosition(myItem),
                columnLabel: this.getColumnLabelAtPosition(myItem)
            };
            return event;
        };
        GoogleChartComponent.prototype.unregisterEvents = function () {
            google.visualization.events.removeAllListeners(this.wrapper.getChart());
            google.visualization.events.removeAllListeners(this.wrapper);
        };
        GoogleChartComponent.prototype.registerChartEvents = function () {
            var _this = this;
            var chart = this.wrapper.getChart();
            this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;
            if (this.mouseOver.observers.length > 0) {
                google.visualization.events.addListener(chart, 'onmouseover', function (item) {
                    var event = _this.parseMouseEvent(item);
                    event.tooltip = _this.getHTMLTooltip();
                    _this.mouseOver.emit(event);
                });
            }
            if (this.mouseOverOneTime.observers.length > 0) {
                google.visualization.events.addOneTimeListener(chart, 'onmouseover', function (item) {
                    var event = _this.parseMouseEvent(item);
                    event.tooltip = _this.getHTMLTooltip();
                    _this.mouseOverOneTime.emit(event);
                });
            }
            if (this.mouseOut.observers.length > 0) {
                google.visualization.events.addListener(chart, 'onmouseout', function (item) {
                    var event = _this.parseMouseEvent(item);
                    _this.mouseOut.emit(event);
                });
            }
            if (this.mouseOutOneTime.observers.length > 0) {
                google.visualization.events.addOneTimeListener(chart, 'onmouseout', function (item) {
                    var event = _this.parseMouseEvent(item);
                    _this.mouseOutOneTime.emit(event);
                });
            }
            if (this.data.chartType === 'GeoChart') {
                if (this.regionClick.observers.length > 0) {
                    google.visualization.events.addListener(chart, 'regionClick', function (item) {
                        _this.regionClick.emit(item);
                    });
                }
                if (this.regionClickOneTime.observers.length > 0) {
                    google.visualization.events.addOneTimeListener(chart, 'regionClick', function (item) {
                        _this.regionClick.emit(item);
                    });
                }
            }
        };
        GoogleChartComponent.prototype.registerChartWrapperEvents = function () {
            var _this = this;
            google.visualization.events.addListener(this.wrapper, 'ready', function () {
                _this.chartReady.emit({ message: 'Chart ready' });
            });
            google.visualization.events.addOneTimeListener(this.wrapper, 'ready', function () {
                _this.chartReadyOneTime.emit({ message: 'Chart ready (one time)' });
                _this.registerChartEvents();
            });
            google.visualization.events.addListener(this.wrapper, 'error', function (error) {
                _this.chartError.emit(error);
            });
            google.visualization.events.addOneTimeListener(this.wrapper, 'error', function (error) {
                _this.chartErrorOneTime.emit(error);
            });
            this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);
            this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);
        };
        GoogleChartComponent.prototype.addListener = function (source, eventType, listenerFn, evEmitter) {
            google.visualization.events.addListener(source, eventType, function () {
                evEmitter.emit(listenerFn());
            });
        };
        GoogleChartComponent.prototype.addOneTimeListener = function (source, eventType, listenerFn, evEmitter) {
            google.visualization.events.addOneTimeListener(source, eventType, function () {
                evEmitter.emit(listenerFn());
            });
        };
        GoogleChartComponent.prototype.convertOptions = function () {
            try {
                this.options = google.charts[this.data.chartType].convertOptions(this.options);
            }
            catch (error) {
                return;
            }
        };
        return GoogleChartComponent;
    }());
    __decorate([
        i0.Input(),
        __metadata("design:type", Object)
    ], exports.GoogleChartComponent.prototype, "data", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartReady", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartReadyOneTime", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartError", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartErrorOneTime", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartSelect", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "chartSelectOneTime", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "mouseOver", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "mouseOverOneTime", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "mouseOut", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "mouseOutOneTime", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "regionClick", void 0);
    __decorate([
        i0.Output(),
        __metadata("design:type", i0.EventEmitter)
    ], exports.GoogleChartComponent.prototype, "regionClickOneTime", void 0);
    exports.GoogleChartComponent = __decorate([
        i0.Component({
            selector: 'google-chart',
            template: '<div></div>'
        }),
        __metadata("design:paramtypes", [i0.ElementRef,
            exports.GoogleChartsLoaderService])
    ], exports.GoogleChartComponent);

    exports.GoogleChartsDashboardComponent = /** @class */ (function () {
        function GoogleChartsDashboardComponent(el, loaderService) {
            this.el = el;
            this.loaderService = loaderService;
            this.el = el;
            this.loaderService = loaderService;
        }
        GoogleChartsDashboardComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.data.component = this;
            this.init().then(function () {
                if (!_this.dataTable) {
                    _this.dataTable = new GoogleChartsDataTable(_this.data);
                    _this.dataTable.dataTableChanged.subscribe(function (dt) {
                        _this._draw();
                    });
                }
                _this.draw();
            });
        };
        GoogleChartsDashboardComponent.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, b, controls, charts, controls_1, controls_1_1, c, e_1_1, charts_1, charts_1_1, c, data, e_2_1, e_3_1;
                var e_3, _c, e_1, _d, e_2, _e;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0: return [4 /*yield*/, this.loaderService.load({ packages: ['controls'] })];
                        case 1:
                            _f.sent();
                            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));
                            _f.label = 2;
                        case 2:
                            _f.trys.push([2, 21, 22, 23]);
                            _a = __values(this.data.bind), _b = _a.next();
                            _f.label = 3;
                        case 3:
                            if (!!_b.done) return [3 /*break*/, 20];
                            b = _b.value;
                            controls = b[0];
                            charts = b[1];
                            if (!(controls instanceof Array)) {
                                controls = [controls];
                            }
                            if (!(charts instanceof Array)) {
                                charts = [charts];
                            }
                            _f.label = 4;
                        case 4:
                            _f.trys.push([4, 9, 10, 11]);
                            controls_1 = (e_1 = void 0, __values(controls)), controls_1_1 = controls_1.next();
                            _f.label = 5;
                        case 5:
                            if (!!controls_1_1.done) return [3 /*break*/, 8];
                            c = controls_1_1.value;
                            return [4 /*yield*/, c.component.ensureInit()];
                        case 6:
                            _f.sent();
                            _f.label = 7;
                        case 7:
                            controls_1_1 = controls_1.next();
                            return [3 /*break*/, 5];
                        case 8: return [3 /*break*/, 11];
                        case 9:
                            e_1_1 = _f.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 11];
                        case 10:
                            try {
                                if (controls_1_1 && !controls_1_1.done && (_d = controls_1.return)) _d.call(controls_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                            return [7 /*endfinally*/];
                        case 11:
                            _f.trys.push([11, 16, 17, 18]);
                            charts_1 = (e_2 = void 0, __values(charts)), charts_1_1 = charts_1.next();
                            _f.label = 12;
                        case 12:
                            if (!!charts_1_1.done) return [3 /*break*/, 15];
                            c = charts_1_1.value;
                            return [4 /*yield*/, c.component.init()];
                        case 13:
                            _f.sent();
                            data = c.component.data;
                            if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {
                                throw Error('dataTable and dataSourceUrl cannot be specified when ' +
                                    'chart is drawn in a Dashboard');
                            }
                            _f.label = 14;
                        case 14:
                            charts_1_1 = charts_1.next();
                            return [3 /*break*/, 12];
                        case 15: return [3 /*break*/, 18];
                        case 16:
                            e_2_1 = _f.sent();
                            e_2 = { error: e_2_1 };
                            return [3 /*break*/, 18];
                        case 17:
                            try {
                                if (charts_1_1 && !charts_1_1.done && (_e = charts_1.return)) _e.call(charts_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                            return [7 /*endfinally*/];
                        case 18:
                            this.dashboard.bind(controls.map(function (x) { return x.component.wrapper; }), charts.map(function (x) { return x.component.wrapper; }));
                            _f.label = 19;
                        case 19:
                            _b = _a.next();
                            return [3 /*break*/, 3];
                        case 20: return [3 /*break*/, 23];
                        case 21:
                            e_3_1 = _f.sent();
                            e_3 = { error: e_3_1 };
                            return [3 /*break*/, 23];
                        case 22:
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_3) throw e_3.error; }
                            return [7 /*endfinally*/];
                        case 23: return [2 /*return*/];
                    }
                });
            });
        };
        GoogleChartsDashboardComponent.prototype.draw = function (value) {
            this.dataTable.init(value);
        };
        GoogleChartsDashboardComponent.prototype._draw = function () {
            this.dashboard.draw(this.dataTable.getDataTable());
        };
        return GoogleChartsDashboardComponent;
    }());
    __decorate([
        i0.Input(),
        __metadata("design:type", Object)
    ], exports.GoogleChartsDashboardComponent.prototype, "data", void 0);
    exports.GoogleChartsDashboardComponent = __decorate([
        i0.Component({
            selector: 'google-charts-dashboard',
            template: '<div></div>'
        }),
        __metadata("design:paramtypes", [i0.ElementRef,
            exports.GoogleChartsLoaderService])
    ], exports.GoogleChartsDashboardComponent);

    exports.GoogleChartsControlComponent = /** @class */ (function () {
        function GoogleChartsControlComponent(el, loaderService) {
            this.el = el;
            this.loaderService = loaderService;
            this.el = el;
            this.loaderService = loaderService;
        }
        GoogleChartsControlComponent.prototype.ngOnInit = function () {
            this.data.component = this;
        };
        GoogleChartsControlComponent.prototype.ensureInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var opt;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.wrapper) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.loaderService.load({ packages: ['controls'] })];
                        case 1:
                            _a.sent();
                            opt = Object.create(this.data);
                            opt.containerId = this.el.nativeElement.querySelector('div');
                            this.wrapper = new google.visualization.ControlWrapper(opt);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return GoogleChartsControlComponent;
    }());
    __decorate([
        i0.Input(),
        __metadata("design:type", Object)
    ], exports.GoogleChartsControlComponent.prototype, "data", void 0);
    exports.GoogleChartsControlComponent = __decorate([
        i0.Component({
            selector: 'google-charts-control',
            template: '<div></div>'
        }),
        __metadata("design:paramtypes", [i0.ElementRef,
            exports.GoogleChartsLoaderService])
    ], exports.GoogleChartsControlComponent);

    exports.Ng2GoogleChartsModule = /** @class */ (function () {
        function Ng2GoogleChartsModule() {
        }
        return Ng2GoogleChartsModule;
    }());
    exports.Ng2GoogleChartsModule = __decorate([
        i0.NgModule({
            declarations: [
                exports.GoogleChartComponent,
                exports.GoogleChartsDashboardComponent,
                exports.GoogleChartsControlComponent,
            ],
            providers: [
                exports.GoogleChartsLoaderService
            ],
            exports: [
                exports.GoogleChartComponent,
                exports.GoogleChartsDashboardComponent,
                exports.GoogleChartsControlComponent,
            ]
        })
    ], exports.Ng2GoogleChartsModule);

    function isComponent(chart) {
        return chart.wrapper !== undefined;
    }
    exports.GoogleChartEditor = /** @class */ (function () {
        function GoogleChartEditor(loaderService) {
            this.loaderService = loaderService;
        }
        GoogleChartEditor.prototype.createEditor = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.chartEditor !== undefined) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.loaderService.load({ packages: ['charteditor'] })];
                        case 1:
                            _a.sent();
                            this.chartEditor = new google.visualization.ChartEditor();
                            google.visualization.events.addListener(this.chartEditor, 'ok', function () {
                                var wrapper = _this.chartEditor.getChartWrapper();
                                _this.comp.wrapper = wrapper;
                                _this.comp.data.chartType = wrapper.getChartType();
                                if (_this.comp.data.options !== undefined || Object.isExtensible(_this.comp.data)) {
                                    _this.comp.data.options = wrapper.getOptions();
                                }
                                _this.comp.wrapper.draw();
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        GoogleChartEditor.prototype.openDialog = function (chart, options) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.createEditor()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    _this.comp = isComponent(chart) ? chart : chart.component;
                                    _this.chartEditor.openDialog(_this.comp.wrapper, options);
                                    google.visualization.events.addListener(_this.chartEditor, 'ok', function () {
                                        resolve(_this.comp.wrapper);
                                    });
                                    google.visualization.events.addListener(_this.chartEditor, 'cancel', function () {
                                        reject();
                                    });
                                })];
                    }
                });
            });
        };
        return GoogleChartEditor;
    }());
    exports.GoogleChartEditor.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartEditor_Factory() { return new exports.GoogleChartEditor(i0.ɵɵinject(exports.GoogleChartsLoaderService)); }, token: exports.GoogleChartEditor, providedIn: "root" });
    exports.GoogleChartEditor = __decorate([
        i0.Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [exports.GoogleChartsLoaderService])
    ], exports.GoogleChartEditor);

    /*
     * Public API Surface of ng2-google-charts
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ChartHTMLTooltip = ChartHTMLTooltip;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng2-google-charts.umd.js.map
