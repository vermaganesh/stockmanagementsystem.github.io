import { __awaiter, __decorate, __metadata } from "tslib";
import { Component, Input, ElementRef } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
let GoogleChartsControlComponent = class GoogleChartsControlComponent {
    constructor(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
        this.el = el;
        this.loaderService = loaderService;
    }
    ngOnInit() {
        this.data.component = this;
    }
    ensureInit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.wrapper) {
                return;
            }
            yield this.loaderService.load({ packages: ['controls'] });
            let opt;
            opt = Object.create(this.data);
            opt.containerId = this.el.nativeElement.querySelector('div');
            this.wrapper = new google.visualization.ControlWrapper(opt);
        });
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], GoogleChartsControlComponent.prototype, "data", void 0);
GoogleChartsControlComponent = __decorate([
    Component({
        selector: 'google-charts-control',
        template: '<div></div>'
    }),
    __metadata("design:paramtypes", [ElementRef,
        GoogleChartsLoaderService])
], GoogleChartsControlComponent);
export { GoogleChartsControlComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1jb250cm9sLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1nb29nbGUtY2hhcnRzL3NyYy9saWIvZ29vZ2xlLWNoYXJ0cy1jb250cm9sL2dvb2dsZS1jaGFydHMtY29udHJvbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVNBLE9BQU8sRUFDTCxTQUFTLEVBQVUsS0FBSyxFQUN4QixVQUFVLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFTNUUsSUFBYSw0QkFBNEIsR0FBekMsTUFBYSw0QkFBNEI7SUFNdkMsWUFBMkIsRUFBYyxFQUNkLGFBQXdDO1FBRHhDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7UUFDakUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztJQUNyQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRVksVUFBVTs7WUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNoQixPQUFPO2FBQ1I7WUFDRCxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELElBQUksR0FBdUMsQ0FBQztZQUM1QyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlELENBQUM7S0FBQTtDQUNGLENBQUE7QUF4QlU7SUFBUixLQUFLLEVBQUU7OzBEQUEyQztBQUZ4Qyw0QkFBNEI7SUFKeEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxRQUFRLEVBQUUsYUFBYTtLQUN4QixDQUFDO3FDQU8rQixVQUFVO1FBQ0MseUJBQXlCO0dBUHhELDRCQUE0QixDQTBCeEM7U0ExQlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSB2YXIgZ29vZ2xlOiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZSB7XG4gIGNvbnRyb2xUeXBlOiBzdHJpbmc7XG4gIG9wdGlvbnM/OiBvYmplY3Q7XG4gIHN0YXRlPzogb2JqZWN0O1xuICBjb21wb25lbnQ/OiBHb29nbGVDaGFydHNDb250cm9sQ29tcG9uZW50O1xufVxuXG5pbXBvcnQge1xuICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsXG4gIEVsZW1lbnRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UgfSBmcm9tICcuLi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlJztcblxuaW50ZXJmYWNlIEludGVybmFsR29vZ2xlQ2hhcnRzQ29udHJvbE9wdGlvbnMgZXh0ZW5kcyBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlIHtcbiAgY29udGFpbmVySWQ6IHN0cmluZztcbn1cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2dvb2dsZS1jaGFydHMtY29udHJvbCcsXG4gIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLFxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNDb250cm9sQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBwdWJsaWMgZGF0YTogR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZTtcblxuICBwdWJsaWMgd3JhcHBlcjogYW55O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBsb2FkZXJTZXJ2aWNlOiBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMubG9hZGVyU2VydmljZSA9IGxvYWRlclNlcnZpY2U7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmRhdGEuY29tcG9uZW50ID0gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBlbnN1cmVJbml0KCkge1xuICAgIGlmICh0aGlzLndyYXBwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5sb2FkZXJTZXJ2aWNlLmxvYWQoe3BhY2thZ2VzOiBbJ2NvbnRyb2xzJ10gfSk7XG4gICAgbGV0IG9wdDogSW50ZXJuYWxHb29nbGVDaGFydHNDb250cm9sT3B0aW9ucztcbiAgICBvcHQgPSBPYmplY3QuY3JlYXRlKHRoaXMuZGF0YSk7XG4gICAgb3B0LmNvbnRhaW5lcklkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICAgIHRoaXMud3JhcHBlciA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5Db250cm9sV3JhcHBlcihvcHQpO1xuICB9XG59XG4iXX0=