import { __awaiter, __decorate, __metadata, __param } from "tslib";
import { Injectable, EventEmitter, LOCALE_ID, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
let GoogleChartsLoaderService = class GoogleChartsLoaderService {
    constructor(localeId, googleChartsSettings) {
        this.googleChartsSettings = googleChartsSettings;
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.googleScriptIsLoading = false;
        this.localeId = localeId;
        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!this.googleScriptIsLoading) {
                this.googleScriptIsLoading = true;
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    }
    load(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadGoogleChartsScriptPromise;
            yield new Promise((resolve) => {
                if (!settings) {
                    settings = Object.create(this.googleChartsSettings);
                }
                if (!settings) {
                    settings = {};
                }
                if (!settings.language) {
                    settings.language = this.localeId;
                }
                if (!settings.googleChartsVersion) {
                    settings.googleChartsVersion = '47';
                }
                const _settings = settings;
                _settings.callback = resolve;
                google.charts.load(settings.googleChartsVersion, _settings);
            });
        });
    }
};
GoogleChartsLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartsLoaderService_Factory() { return new GoogleChartsLoaderService(i0.ɵɵinject(i0.LOCALE_ID), i0.ɵɵinject("googleChartsSettings", 8)); }, token: GoogleChartsLoaderService, providedIn: "root" });
GoogleChartsLoaderService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(LOCALE_ID)),
    __param(1, Inject('googleChartsSettings')), __param(1, Optional()),
    __metadata("design:paramtypes", [String, Object])
], GoogleChartsLoaderService);
export { GoogleChartsLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1nb29nbGUtY2hhcnRzL3NyYy9saWIvZ29vZ2xlLWNoYXJ0cy1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVXRGLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBT3BDLFlBQ3FCLFFBQWdCLEVBQ2lCLG9CQUEyQztRQUEzQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBRS9GLElBQUksQ0FBQywyQkFBMkIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3RELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25FLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQ2xELE9BQU8sRUFBRSxDQUFDO2FBQ1g7aUJBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFFdEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztnQkFFbEMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDaEQsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztnQkFDaEMsTUFBTSxDQUFDLEdBQUcsR0FBRywwQ0FBMEMsQ0FBQztnQkFDeEQsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtvQkFDbkIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQztvQkFDbkMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxFQUFFLENBQUM7Z0JBQ1osQ0FBQyxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO29CQUNwQixJQUFJLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO29CQUNuQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUM3QyxNQUFNLEVBQUUsQ0FBQztnQkFDWCxDQUFDLENBQUM7Z0JBQ0YsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUU5RDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBZSxFQUFFLEVBQUU7b0JBQzdELElBQUksTUFBTSxFQUFFO3dCQUNWLE9BQU8sRUFBRSxDQUFDO3FCQUNYO3lCQUFNO3dCQUNMLE1BQU0sRUFBRSxDQUFDO3FCQUNWO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFWSxJQUFJLENBQUMsUUFBK0I7O1lBQy9DLE1BQU0sSUFBSSxDQUFDLDZCQUE2QixDQUFDO1lBRXpDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDYixRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztpQkFDckQ7Z0JBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDYixRQUFRLEdBQUcsRUFBRSxDQUFDO2lCQUNmO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO29CQUN0QixRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQ25DO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUU7b0JBQ2pDLFFBQVEsQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7aUJBQ3JDO2dCQUVELE1BQU0sU0FBUyxHQUFpQyxRQUFRLENBQUM7Z0JBQ3pELFNBQVMsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO2dCQUU3QixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDOUQsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7Q0FDRixDQUFBOztBQTVFWSx5QkFBeUI7SUFIckMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztJQVNHLFdBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2pCLFdBQUEsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUEsRUFBRSxXQUFBLFFBQVEsRUFBRSxDQUFBOztHQVRsQyx5QkFBeUIsQ0E0RXJDO1NBNUVZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIGdvb2dsZTogYW55O1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIsIExPQ0FMRV9JRCwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzU2V0dGluZ3MgfSBmcm9tICcuL2dvb2dsZS1jaGFydHMtaW50ZXJmYWNlcyc7XG5cbmludGVyZmFjZSBJbnRlcm5hbEdvb2dsZUNoYXJ0c1NldHRpbmdzIGV4dGVuZHMgR29vZ2xlQ2hhcnRzU2V0dGluZ3Mge1xuICBjYWxsYmFjaz8oKTogYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlIHtcblxuICBwcml2YXRlIGdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllcjogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICBwcml2YXRlIGdvb2dsZVNjcmlwdElzTG9hZGluZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nO1xuICBwcml2YXRlIGxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KExPQ0FMRV9JRCkgbG9jYWxlSWQ6IHN0cmluZyxcbiAgICBASW5qZWN0KCdnb29nbGVDaGFydHNTZXR0aW5ncycpIEBPcHRpb25hbCgpIHByaXZhdGUgZ29vZ2xlQ2hhcnRzU2V0dGluZ3M/OiBHb29nbGVDaGFydHNTZXR0aW5ncyxcbiAgKSB7XG4gICAgdGhpcy5nb29nbGVTY3JpcHRMb2FkaW5nTm90aWZpZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmxvY2FsZUlkID0gbG9jYWxlSWQ7XG5cbiAgICB0aGlzLmxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBnb29nbGUgIT09ICd1bmRlZmluZWQnICYmIGdvb2dsZS5jaGFydHMpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcpIHtcblxuICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdElzTG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICAgIHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vY2hhcnRzL2xvYWRlci5qcyc7XG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5lbWl0KHRydWUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5nb29nbGVTY3JpcHRJc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5lbWl0KGZhbHNlKTtcbiAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdvb2dsZVNjcmlwdExvYWRpbmdOb3RpZmllci5zdWJzY3JpYmUoKGxvYWRlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgIGlmIChsb2FkZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsb2FkKHNldHRpbmdzPzogR29vZ2xlQ2hhcnRzU2V0dGluZ3MpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmxvYWRHb29nbGVDaGFydHNTY3JpcHRQcm9taXNlO1xuXG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBPYmplY3QuY3JlYXRlKHRoaXMuZ29vZ2xlQ2hhcnRzU2V0dGluZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNldHRpbmdzLmxhbmd1YWdlKSB7XG4gICAgICAgIHNldHRpbmdzLmxhbmd1YWdlID0gdGhpcy5sb2NhbGVJZDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZXR0aW5ncy5nb29nbGVDaGFydHNWZXJzaW9uKSB7XG4gICAgICAgIHNldHRpbmdzLmdvb2dsZUNoYXJ0c1ZlcnNpb24gPSAnNDcnO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBfc2V0dGluZ3M6IEludGVybmFsR29vZ2xlQ2hhcnRzU2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgIF9zZXR0aW5ncy5jYWxsYmFjayA9IHJlc29sdmU7XG5cbiAgICAgIGdvb2dsZS5jaGFydHMubG9hZChzZXR0aW5ncy5nb29nbGVDaGFydHNWZXJzaW9uLCBfc2V0dGluZ3MpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=