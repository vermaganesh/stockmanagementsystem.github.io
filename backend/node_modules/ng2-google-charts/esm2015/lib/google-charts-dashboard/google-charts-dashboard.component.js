import { __awaiter, __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, } from '@angular/core';
import { GoogleChartsLoaderService } from '../google-charts-loader.service';
import { GoogleChartsDataTable } from '../google-charts-datatable';
let GoogleChartsDashboardComponent = class GoogleChartsDashboardComponent {
    constructor(el, loaderService) {
        this.el = el;
        this.loaderService = loaderService;
        this.el = el;
        this.loaderService = loaderService;
    }
    ngOnInit() {
        this.data.component = this;
        this.init().then(() => {
            if (!this.dataTable) {
                this.dataTable = new GoogleChartsDataTable(this.data);
                this.dataTable.dataTableChanged.subscribe((dt) => {
                    this._draw();
                });
            }
            this.draw();
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loaderService.load({ packages: ['controls'] });
            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));
            for (const b of this.data.bind) {
                let controls = b[0];
                let charts = b[1];
                if (!(controls instanceof Array)) {
                    controls = [controls];
                }
                if (!(charts instanceof Array)) {
                    charts = [charts];
                }
                for (const c of controls) {
                    yield c.component.ensureInit();
                }
                for (const c of charts) {
                    yield c.component.init();
                    const data = c.component.data;
                    if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {
                        throw Error('dataTable and dataSourceUrl cannot be specified when ' +
                            'chart is drawn in a Dashboard');
                    }
                }
                this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));
            }
        });
    }
    draw(value) {
        this.dataTable.init(value);
    }
    _draw() {
        this.dashboard.draw(this.dataTable.getDataTable());
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], GoogleChartsDashboardComponent.prototype, "data", void 0);
GoogleChartsDashboardComponent = __decorate([
    Component({
        selector: 'google-charts-dashboard',
        template: '<div></div>'
    }),
    __metadata("design:paramtypes", [ElementRef,
        GoogleChartsLoaderService])
], GoogleChartsDashboardComponent);
export { GoogleChartsDashboardComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0cy1kYXNoYm9hcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWdvb2dsZS1jaGFydHMvc3JjL2xpYi9nb29nbGUtY2hhcnRzLWRhc2hib2FyZC9nb29nbGUtY2hhcnRzLWRhc2hib2FyZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUVWLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUk1RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQWVuRSxJQUFhLDhCQUE4QixHQUEzQyxNQUFhLDhCQUE4QjtJQU96QyxZQUEyQixFQUFjLEVBQ2QsYUFBd0M7UUFEeEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUNqRSxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRTNCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQU8sRUFBRSxFQUFFO29CQUNwRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUNELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVZLElBQUk7O1lBQ2YsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQ2pELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRTlDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQzlCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVsQixJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxDQUFDLEVBQUU7b0JBQ2hDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN2QjtnQkFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLEVBQUU7b0JBQzlCLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNuQjtnQkFFRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRTtvQkFDeEIsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO2lCQUNoQztnQkFFRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRTtvQkFDdEIsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztvQkFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFNBQVMsRUFBRTt3QkFDcEUsTUFBTSxLQUFLLENBQUMsdURBQXVEOzRCQUN2RCwrQkFBK0IsQ0FBQyxDQUFDO3FCQUM5QztpQkFDRjtnQkFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUM7S0FBQTtJQUVNLElBQUksQ0FBQyxLQUE0QjtRQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8sS0FBSztRQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0YsQ0FBQTtBQXBFVTtJQUFSLEtBQUssRUFBRTs7NERBQTZDO0FBRjFDLDhCQUE4QjtJQUoxQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUseUJBQXlCO1FBQ25DLFFBQVEsRUFBRSxhQUFhO0tBQ3hCLENBQUM7cUNBUStCLFVBQVU7UUFDQyx5QkFBeUI7R0FSeEQsOEJBQThCLENBc0UxQztTQXRFWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIHZhciBnb29nbGU6IGFueTtcblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzRGF0YVRhYmxlSW50ZXJmYWNlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0cy1kYXRhdGFibGUnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzQ29udHJvbEludGVyZmFjZSB9IGZyb20gJy4uL2dvb2dsZS1jaGFydHMtY29udHJvbC9nb29nbGUtY2hhcnRzLWNvbnRyb2wuY29tcG9uZW50JztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0SW50ZXJmYWNlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0L2dvb2dsZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRzRGF0YVRhYmxlIH0gZnJvbSAnLi4vZ29vZ2xlLWNoYXJ0cy1kYXRhdGFibGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZUNoYXJ0c0Rhc2hib2FyZEludGVyZmFjZSBleHRlbmRzXG4gR29vZ2xlQ2hhcnRzRGF0YVRhYmxlSW50ZXJmYWNlIHtcbiAgYmluZDogW1xuICAgIEdvb2dsZUNoYXJ0c0NvbnRyb2xJbnRlcmZhY2UgfCBHb29nbGVDaGFydHNDb250cm9sSW50ZXJmYWNlW10sXG4gICAgR29vZ2xlQ2hhcnRJbnRlcmZhY2UgfCBHb29nbGVDaGFydEludGVyZmFjZVtdXG4gIF1bXTtcbiAgY29tcG9uZW50PzogR29vZ2xlQ2hhcnRzRGFzaGJvYXJkQ29tcG9uZW50O1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdnb29nbGUtY2hhcnRzLWRhc2hib2FyZCcsXG4gIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nLFxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVDaGFydHNEYXNoYm9hcmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHB1YmxpYyBkYXRhOiBHb29nbGVDaGFydHNEYXNoYm9hcmRJbnRlcmZhY2U7XG5cbiAgcHVibGljIGRhc2hib2FyZDogYW55O1xuICBwdWJsaWMgZGF0YVRhYmxlOiBHb29nbGVDaGFydHNEYXRhVGFibGU7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGxvYWRlclNlcnZpY2U6IEdvb2dsZUNoYXJ0c0xvYWRlclNlcnZpY2UpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy5sb2FkZXJTZXJ2aWNlID0gbG9hZGVyU2VydmljZTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGF0YS5jb21wb25lbnQgPSB0aGlzO1xuXG4gICAgdGhpcy5pbml0KCkudGhlbigoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuZGF0YVRhYmxlKSB7XG4gICAgICAgIHRoaXMuZGF0YVRhYmxlID0gbmV3IEdvb2dsZUNoYXJ0c0RhdGFUYWJsZSh0aGlzLmRhdGEpO1xuICAgICAgICB0aGlzLmRhdGFUYWJsZS5kYXRhVGFibGVDaGFuZ2VkLnN1YnNjcmliZSgoZHQ6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRyYXcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbml0KCkge1xuICAgIGF3YWl0IHRoaXMubG9hZGVyU2VydmljZS5sb2FkKHtwYWNrYWdlczogWydjb250cm9scyddIH0pO1xuXG4gICAgdGhpcy5kYXNoYm9hcmQgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uRGFzaGJvYXJkKFxuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2RpdicpKTtcblxuICAgIGZvciAoY29uc3QgYiBvZiB0aGlzLmRhdGEuYmluZCkge1xuICAgICAgbGV0IGNvbnRyb2xzID0gYlswXTtcbiAgICAgIGxldCBjaGFydHMgPSBiWzFdO1xuXG4gICAgICBpZiAoIShjb250cm9scyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICBjb250cm9scyA9IFtjb250cm9sc107XG4gICAgICB9XG5cbiAgICAgIGlmICghKGNoYXJ0cyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICBjaGFydHMgPSBbY2hhcnRzXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBjIG9mIGNvbnRyb2xzKSB7XG4gICAgICAgIGF3YWl0IGMuY29tcG9uZW50LmVuc3VyZUluaXQoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBjIG9mIGNoYXJ0cykge1xuICAgICAgICBhd2FpdCBjLmNvbXBvbmVudC5pbml0KCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjLmNvbXBvbmVudC5kYXRhO1xuICAgICAgICBpZiAoZGF0YS5kYXRhVGFibGUgIT09IHVuZGVmaW5lZCB8fCBkYXRhLmRhdGFTb3VyY2VVcmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IEVycm9yKCdkYXRhVGFibGUgYW5kIGRhdGFTb3VyY2VVcmwgY2Fubm90IGJlIHNwZWNpZmllZCB3aGVuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdjaGFydCBpcyBkcmF3biBpbiBhIERhc2hib2FyZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGFzaGJvYXJkLmJpbmQoY29udHJvbHMubWFwKHggPT4geC5jb21wb25lbnQud3JhcHBlciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0cy5tYXAoeCA9PiB4LmNvbXBvbmVudC53cmFwcGVyKSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRyYXcodmFsdWU/OiBHb29nbGVDaGFydEludGVyZmFjZSkge1xuICAgIHRoaXMuZGF0YVRhYmxlLmluaXQodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZHJhdygpIHtcbiAgICB0aGlzLmRhc2hib2FyZC5kcmF3KHRoaXMuZGF0YVRhYmxlLmdldERhdGFUYWJsZSgpKTtcbiAgfVxufVxuIl19