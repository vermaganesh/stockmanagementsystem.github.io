import { __awaiter, __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { GoogleChartsLoaderService } from './google-charts-loader.service';
import * as i0 from "@angular/core";
import * as i1 from "./google-charts-loader.service";
function isComponent(chart) {
    return chart.wrapper !== undefined;
}
let GoogleChartEditor = class GoogleChartEditor {
    constructor(loaderService) {
        this.loaderService = loaderService;
    }
    createEditor() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.chartEditor !== undefined) {
                return;
            }
            yield this.loaderService.load({ packages: ['charteditor'] });
            this.chartEditor = new google.visualization.ChartEditor();
            google.visualization.events.addListener(this.chartEditor, 'ok', () => {
                const wrapper = this.chartEditor.getChartWrapper();
                this.comp.wrapper = wrapper;
                this.comp.data.chartType = wrapper.getChartType();
                if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {
                    this.comp.data.options = wrapper.getOptions();
                }
                this.comp.wrapper.draw();
            });
        });
    }
    openDialog(chart, options) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.createEditor();
            return new Promise((resolve, reject) => {
                this.comp = isComponent(chart) ? chart : chart.component;
                this.chartEditor.openDialog(this.comp.wrapper, options);
                google.visualization.events.addListener(this.chartEditor, 'ok', () => {
                    resolve(this.comp.wrapper);
                });
                google.visualization.events.addListener(this.chartEditor, 'cancel', () => {
                    reject();
                });
            });
        });
    }
};
GoogleChartEditor.ɵprov = i0.ɵɵdefineInjectable({ factory: function GoogleChartEditor_Factory() { return new GoogleChartEditor(i0.ɵɵinject(i1.GoogleChartsLoaderService)); }, token: GoogleChartEditor, providedIn: "root" });
GoogleChartEditor = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [GoogleChartsLoaderService])
], GoogleChartEditor);
export { GoogleChartEditor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWNoYXJ0LWVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1nb29nbGUtY2hhcnRzL3NyYy9saWIvZ29vZ2xlLWNoYXJ0LWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7O0FBSTNFLFNBQVMsV0FBVyxDQUFDLEtBQWtEO0lBQ3JFLE9BQVEsS0FBOEIsQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDO0FBQy9ELENBQUM7QUFXRCxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQU01QixZQUEyQixhQUF3QztRQUF4QyxrQkFBYSxHQUFiLGFBQWEsQ0FBMkI7SUFBRSxDQUFDO0lBRXhELFlBQVk7O1lBQ3hCLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQ2xDLE9BQU87YUFDUjtZQUNELE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDMUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtnQkFDbkUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO2dCQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNsRCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUMvRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO2lCQUMvQztnQkFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTtJQUVZLFVBQVUsQ0FBQyxLQUFrRCxFQUFFLE9BQWtDOztZQUM1RyxNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUUxQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDeEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtvQkFDbkUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzdCLENBQUMsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7b0JBQ3ZFLE1BQU0sRUFBRSxDQUFDO2dCQUNYLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7Q0FFRixDQUFBOztBQXhDWSxpQkFBaUI7SUFIN0IsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztxQ0FPMEMseUJBQXlCO0dBTnhELGlCQUFpQixDQXdDN0I7U0F4Q1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBHb29nbGVDaGFydHNMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9nb29nbGUtY2hhcnRzLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdvb2dsZUNoYXJ0Q29tcG9uZW50LCBHb29nbGVDaGFydEludGVyZmFjZSB9IGZyb20gJy4vZ29vZ2xlLWNoYXJ0L2dvb2dsZS1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgR29vZ2xlQ2hhcnRXcmFwcGVyIH0gZnJvbSAnLi9nb29nbGUtY2hhcnRzLWludGVyZmFjZXMnO1xuXG5mdW5jdGlvbiBpc0NvbXBvbmVudChjaGFydDogR29vZ2xlQ2hhcnRDb21wb25lbnQgfCBHb29nbGVDaGFydEludGVyZmFjZSk6IGNoYXJ0IGlzIEdvb2dsZUNoYXJ0Q29tcG9uZW50IHtcbiAgcmV0dXJuIChjaGFydCBhcyBHb29nbGVDaGFydENvbXBvbmVudCkud3JhcHBlciAhPT0gdW5kZWZpbmVkO1xufVxuXG5kZWNsYXJlIHZhciBnb29nbGU6IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBHb29nbGVDaGFydEVkaXRvck9wdGlvbnMge1xuICBkYXRhU291cmNlSW5wdXQ/OiBhbnk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEdvb2dsZUNoYXJ0RWRpdG9yIHtcblxuICBjaGFydEVkaXRvcjogYW55O1xuXG4gIHByaXZhdGUgY29tcDogR29vZ2xlQ2hhcnRDb21wb25lbnQ7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGVyU2VydmljZTogR29vZ2xlQ2hhcnRzTG9hZGVyU2VydmljZSl7fVxuXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlRWRpdG9yKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0RWRpdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5sb2FkZXJTZXJ2aWNlLmxvYWQoeyBwYWNrYWdlczogWydjaGFydGVkaXRvciddIH0pO1xuICAgIHRoaXMuY2hhcnRFZGl0b3IgPSBuZXcgZ29vZ2xlLnZpc3VhbGl6YXRpb24uQ2hhcnRFZGl0b3IoKTtcbiAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkTGlzdGVuZXIodGhpcy5jaGFydEVkaXRvciwgJ29rJywgKCkgPT4ge1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuY2hhcnRFZGl0b3IuZ2V0Q2hhcnRXcmFwcGVyKCk7XG4gICAgICB0aGlzLmNvbXAud3JhcHBlciA9IHdyYXBwZXI7XG4gICAgICB0aGlzLmNvbXAuZGF0YS5jaGFydFR5cGUgPSB3cmFwcGVyLmdldENoYXJ0VHlwZSgpO1xuICAgICAgaWYgKHRoaXMuY29tcC5kYXRhLm9wdGlvbnMgIT09IHVuZGVmaW5lZCB8fCBPYmplY3QuaXNFeHRlbnNpYmxlKHRoaXMuY29tcC5kYXRhKSkge1xuICAgICAgICB0aGlzLmNvbXAuZGF0YS5vcHRpb25zID0gd3JhcHBlci5nZXRPcHRpb25zKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbXAud3JhcHBlci5kcmF3KCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgb3BlbkRpYWxvZyhjaGFydDogR29vZ2xlQ2hhcnRDb21wb25lbnQgfCBHb29nbGVDaGFydEludGVyZmFjZSwgb3B0aW9ucz86IEdvb2dsZUNoYXJ0RWRpdG9yT3B0aW9ucyk6IFByb21pc2U8R29vZ2xlQ2hhcnRXcmFwcGVyIHwgYW55PiB7XG4gICAgYXdhaXQgdGhpcy5jcmVhdGVFZGl0b3IoKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNvbXAgPSBpc0NvbXBvbmVudChjaGFydCkgPyBjaGFydCA6IGNoYXJ0LmNvbXBvbmVudDtcbiAgICAgIHRoaXMuY2hhcnRFZGl0b3Iub3BlbkRpYWxvZyh0aGlzLmNvbXAud3JhcHBlciwgb3B0aW9ucyk7XG4gICAgICBnb29nbGUudmlzdWFsaXphdGlvbi5ldmVudHMuYWRkTGlzdGVuZXIodGhpcy5jaGFydEVkaXRvciwgJ29rJywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHRoaXMuY29tcC53cmFwcGVyKTtcbiAgICAgIH0pO1xuICAgICAgZ29vZ2xlLnZpc3VhbGl6YXRpb24uZXZlbnRzLmFkZExpc3RlbmVyKHRoaXMuY2hhcnRFZGl0b3IsICdjYW5jZWwnLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxufVxuIl19