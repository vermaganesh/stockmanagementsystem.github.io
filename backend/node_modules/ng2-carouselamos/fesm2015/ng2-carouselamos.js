import { EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';
import isEqual from 'lodash.isequal';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng2-carouselamos.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SelectedItemInterface() { }
if (false) {
    /** @type {?} */
    SelectedItemInterface.prototype.item;
    /** @type {?} */
    SelectedItemInterface.prototype.index;
    /** @type {?} */
    SelectedItemInterface.prototype.first;
}
/*
 *
 * @param() startAt - index of slide to render first. Default to 0.
 * @param() items - List of items to belong in carousel
 * @param() width - Size of window(view) to show
 * @param() $prev - Template for previous button
 * @param() $next - Template for next button
 * @param() $item - Template for the item
 */
class Ng2CarouselamosComponent {
    constructor() {
        this.childIndex = 0;
        this.amount = 0;
        this.startPress = 0;
        this.lastX = 0;
        this.startAt = 0;
        this.items = [];
        this.width = 500;
        this.onSelectedItem = new EventEmitter();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMousedown(e) {
        if (e.which === 1) {
            this.startPress = e.clientX;
            this.lastX = this.amount;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchdown(e) {
        if (navigator.userAgent.indexOf("Android") >= 0)
            e.preventDefault();
        this.startPress = e.targetTouches[0].clientX;
        this.lastX = this.amount;
    }
    /**
     * @param {?} e
     * @param {?} maxWidth
     * @return {?}
     */
    onMousemove(e, maxWidth) {
        if (e.which === 1) {
            /** @type {?} */
            const amount = this.lastX - (this.startPress - e.clientX);
            if (amount > 0 || amount < -(maxWidth - this.width))
                return;
            this.amount = amount;
        }
    }
    /**
     * @param {?} e
     * @param {?} maxWidth
     * @return {?}
     */
    onTouchmove(e, maxWidth) {
        if (navigator.userAgent.indexOf("Android") >= 0)
            e.preventDefault();
        /** @type {?} */
        const amount = this.lastX - (this.startPress - e.targetTouches[0].clientX);
        if (amount > 0 || amount < -(maxWidth - this.width))
            return;
        this.amount = amount;
    }
    /**
     * @param {?} e
     * @param {?} elem
     * @return {?}
     */
    onMouseup(e, elem) {
        if (e.which === 1) {
            this.startPress = 0;
            this.snap(elem);
        }
    }
    /**
     * @param {?} e
     * @param {?} elem
     * @return {?}
     */
    onTouchup(e, elem) {
        if (navigator.userAgent.indexOf("Android") >= 0)
            e.preventDefault();
        this.startPress = 0;
        this.snap(elem);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    snap(elem) {
        /** @type {?} */
        let counter = 0;
        /** @type {?} */
        let lastVal = 0;
        for (let i = 0; i < this.items.length; i++) {
            /** @type {?} */
            const el = elem.children[i];
            /** @type {?} */
            const style = el.currentStyle || window.getComputedStyle(el);
            counter +=
                el.offsetWidth +
                    (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
            if (this.amount <= lastVal && this.amount >= -counter) {
                this.amount = -lastVal;
                this.childIndex = i;
                this.onSelectedItem.emit({
                    item: this.items[this.childIndex],
                    index: this.childIndex,
                    first: false
                });
                return;
            }
            lastVal = counter;
        }
        return counter;
    }
    /**
     * @param {?} forward
     * @param {?} elem
     * @param {?=} qty
     * @return {?}
     */
    scroll(forward, elem, qty = 1) {
        this.childIndex += forward ? qty : -qty;
        this.onSelectedItem.emit({
            item: this.items[this.childIndex],
            index: this.childIndex,
            first: false
        });
        this.amount = -this.calcScroll(elem);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    calcScroll(elem) {
        /** @type {?} */
        let counter = 0;
        for (let i = this.childIndex - 1; i >= 0; i--) {
            /** @type {?} */
            const el = elem.children[i];
            /** @type {?} */
            const style = el.currentStyle || window.getComputedStyle(el);
            counter +=
                el.offsetWidth +
                    (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
        }
        return counter;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.items &&
            !isEqual(changes.items.previousValue, changes.items.currentValue)) {
            if (changes.items.firstChange) {
                this.onSelectedItem.emit({
                    item: this.items[this.childIndex],
                    index: this.childIndex,
                    first: true
                });
            }
            this.amount = 0;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.startPress = 1;
        this.scroll(true, this.list.nativeElement, this.startAt);
        setTimeout((/**
         * @return {?}
         */
        () => (this.startPress = 0)));
    }
}
Ng2CarouselamosComponent.decorators = [
    { type: Component, args: [{
                selector: "[ng2-carouselamos]",
                template: "<div class=\"ng2-carouselamos-container\">\n  <div\n    class=\"ng2-carouselamos-wrapper\"\n    [style.width]=\"width + 'px'\"\n    (mousedown)=\"onMousedown($event)\"\n    (touchstart)=\"onTouchdown($event)\"\n    (mousemove)=\"onMousemove($event, list.scrollWidth)\"\n    (touchmove)=\"onTouchmove($event, list.scrollWidth)\"\n    (mouseup)=\"onMouseup($event, list)\"\n    (mouseleave)=\"onMouseup($event, list)\"\n    (touchend)=\"onTouchup($event, list)\"\n  >\n    <div\n      class=\"ng2-carouselamos\"\n      [attr.startPress]=\"startPress\"\n      [style.transition]=\"startPress > 0 ? 'none' : '-webkit-transform 1s'\"\n      [style.webkitTransition]=\"\n        startPress > 0 ? 'none' : '-webkit-transform 1s'\n      \"\n      [style.transform]=\"'translateX(' + amount + 'px)'\"\n      [style.webkitTransform]=\"'translateX(' + amount + 'px)'\"\n      #list\n    >\n      <ng-template\n        *ngFor=\"let item of items; let i = index\"\n        [ngTemplateOutlet]=\"$item\"\n        [ngTemplateOutletContext]=\"{\n          $implicit: item,\n          index: i,\n          selectedIndex: childIndex\n        }\"\n      ></ng-template>\n    </div>\n  </div>\n  <div class=\"controls\" *ngIf=\"$prev || $next\">\n    <button\n      type=\"button\"\n      *ngIf=\"$prev\"\n      (click)=\"scroll(false, list)\"\n      [disabled]=\"amount >= 0\"\n    >\n      <ng-template [ngTemplateOutlet]=\"$prev\"></ng-template>\n    </button>\n    <button\n      type=\"button\"\n      *ngIf=\"$next\"\n      (click)=\"scroll(true, list)\"\n      [disabled]=\"amount <= -(list.scrollWidth - width)\"\n    >\n      <ng-template [ngTemplateOutlet]=\"$next\"></ng-template>\n    </button>\n  </div>\n</div>\n",
                styles: [".ng2-carouselamos-container{position:relative;display:flex;justify-content:center}.ng2-carouselamos-wrapper{overflow:hidden}.ng2-carouselamos{display:flex;transition:transform 1s}.controls{pointer-events:none;position:absolute;display:flex;width:100%;justify-content:space-between;top:50%;left:0;transform:translateY(-50%)}.controls button{pointer-events:all;background:0 0;border:0}"]
            }] }
];
Ng2CarouselamosComponent.propDecorators = {
    startAt: [{ type: Input }],
    items: [{ type: Input }],
    width: [{ type: Input }],
    $prev: [{ type: Input }],
    $next: [{ type: Input }],
    $item: [{ type: Input }],
    onSelectedItem: [{ type: Output }],
    list: [{ type: ViewChild, args: ["list", { static: true },] }]
};
if (false) {
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.childIndex;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.amount;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.startPress;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.lastX;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.startAt;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.items;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.width;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.$prev;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.$next;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.$item;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.onSelectedItem;
    /** @type {?} */
    Ng2CarouselamosComponent.prototype.list;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng2-carouselamos.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Ng2CarouselamosModule {
}
Ng2CarouselamosModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Ng2CarouselamosComponent],
                imports: [CommonModule],
                exports: [Ng2CarouselamosComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ng2-carouselamos.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Ng2CarouselamosComponent, Ng2CarouselamosModule };
//# sourceMappingURL=ng2-carouselamos.js.map
